package com.example.team31_personalbest_ms2v2;

import android.graphics.Color;
import android.util.Log;

import com.github.mikephil.charting.charts.BarChart;
import com.github.mikephil.charting.components.XAxis;
import com.github.mikephil.charting.components.YAxis;
import com.github.mikephil.charting.data.BarData;
import com.github.mikephil.charting.data.BarDataSet;
import com.github.mikephil.charting.data.BarEntry;
import com.github.mikephil.charting.formatter.IndexAxisValueFormatter;

import java.util.ArrayList;
import java.util.List;

import static com.example.team31_personalbest_ms2v2.Constants.*;

/**
 * class that creates a stylized barchart
 */
public class ProgressChart implements IDataRetrieverObserver{

    BarChart bc;
    String[] bottomAxisLabels;
    List<Integer> planned;
    List<Integer> unplanned;
    List<Integer> goals;
    int len;

    /**
     * ctor that sets the class variables appropriately
     *
     * @param bc BarChart object is taken from the activity and created
     * @param unplanned list of preformatted unplanned step values
     * @param planned list of preformatted planned step values
     * @param bottomAxisLabels list of axis labels that correspond to unplanned and planned
     */
    public ProgressChart(BarChart bc, List<Integer> unplanned, List<Integer> planned,
                         List<Integer> goals, int len,
                         String[] bottomAxisLabels) {
        this.bc = bc;
        this.bottomAxisLabels = bottomAxisLabels;
        this.planned = planned;
        this.unplanned = unplanned;
        this.goals = goals;
        this.len = len;
    }

    /**
     * sets up the bar chart
     */
    public void setup() {

        // getting the axes of the graph
        XAxis bottomAxis = bc.getXAxis();
        YAxis leftAxis = bc.getAxisLeft();

        // stylizing axes
        formatAxes(bottomAxis, leftAxis);

        // creating a dataSet compatibale with barChart
        BarData data = createData();

        bc.getDescription().setEnabled(false);
        bc.setData(data);

        bc.invalidate(); // refresh
    }

    /**
     *
     */
    private void update(String label, List<Integer> list) {
        Log.i("SHIT", "Updating for " + label);
        if(label.equals("ups")) {
            unplanned = list;
        } else if(label.equals("ps")) {
            planned = list;
        } else if(label.equals("goals")) {
            goals = list;
        } else {
            return;
        }
        setup();
    }

    /**
     *
     * @param bottomAxis
     * @param leftAxis
     */
    private void formatAxes(XAxis bottomAxis, YAxis leftAxis) {

        // bottomAxis formatting ----
        // labels bars as per bottomAxisLabels
        bottomAxis.setValueFormatter(new IndexAxisValueFormatter(bottomAxisLabels));
        bottomAxis.setPosition(XAxis.XAxisPosition.BOTTOM);
        bottomAxis.setDrawLabels(true);
        bottomAxis.setDrawGridLines(false);
        bottomAxis.setDrawAxisLine(true);

        // setting the min and max of the bottom axis so that it is easy to read
        bottomAxis.setAxisMinimum(-1);
        bottomAxis.setAxisMaximum(bottomAxisLabels.length);

        // leftAxis formatting ----
        leftAxis.setDrawGridLines(false);
        // setting the minimum so irrelevant part of graph isn't shown
        leftAxis.setAxisMinimum(0);
        // we are only utilizing one axis and it will be the left one
        bc.getAxisRight().setEnabled(false);
    }

    /**
     *
     * @return BarData object generated by given data from ctor
     */
    private BarData createData() {
        List<BarEntry> barEntries = new ArrayList<>();

        // populating barEntries with values from planned and unplanned
        for(int i = 0; i < len; i++) {
            int stepsToReachGoal = (goals.get(i)-unplanned.get(i)-planned.get(i)>=0) ?
                    goals.get(i)-unplanned.get(i)-planned.get(i) : 0;
            barEntries.add(new BarEntry(i, new float[]{planned.get(i), unplanned.get(i),
                                                       stepsToReachGoal}));
        }

        // making dataset from set labeled "steps"
        BarDataSet set = new BarDataSet(barEntries, "Steps");
        // labels for the chart legend
        set.setStackLabels(new String[]{PLANNED_STEPS_STR, UNPLANNED_STEPS_STR, GOAL_STR});
        // colors for the chart legend
        set.setColors(Color.parseColor(PASTEL_GREEN), Color.parseColor(PASTEL_BLUE),
                      Color.parseColor(LIGHT_GREY));

        BarData data = new BarData(set);
        return data;
    }

    /**
     *
     */
    public void onDataRetrieved(String label, List<Integer> list) {
        Log.i("SHIT", "progress chart has been notified");
        update(label, list);
    }

}
